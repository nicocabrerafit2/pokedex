<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("./partials/head.ejs") %>
</head>

<body class="background">
  <div class="container">
    <h1 class="title">¡Increíble! es un <span class="answer pokemon-name"></span>!</h1>
    <img src="" alt="" class="pokemon-image" />
    <h1>Su peso estimado es de <span class="answer pokemon-weight"></span> kg y suelen tener <span
        class="answer pokemon-height"></span> cm de alto!</h1>
    <h1>Es del tipo <span class="answer pokemon-type"></span></h1>
    <h1>¡Este <span class="answer pokemon-name"></span> sería una gran opción de mascota en el mundo Pokémon!</h1>
    <button onclick="window.history.back();" class="btn btn-primary">Volver</button>
    <div class="error-message" style="display: none; color: red;"></div>
  </div>
  <script defer src="/js/dataPokemonDTO.js"></script>
  <script defer src="/js/detailPokemon.js"></script>
</body>

</html>

<!-- Este archivo HTML está diseñado para mostrar información detallada sobre un Pokémon, con un enfoque dinámico y visual. 
1. Se incluye un motor de plantillas (EJS) en el encabezado para reutilizar componentes, como metadatos o enlaces a recursos comunes.
2. La estructura del cuerpo contiene una clase "background" que probablemente aplica estilos visuales al fondo, y un contenedor principal para organizar el contenido de manera estética.
3. Dentro del contenedor, se generan encabezados dinámicos que despliegan información específica del Pokémon, como su nombre, peso, altura y tipo, utilizando elementos <span> con clases que permiten la inserción dinámica de datos desde JavaScript.
4. Se utiliza una etiqueta <img> para mostrar la imagen del Pokémon con atributos dinámicos aún no definidos.
5. Incluye un botón que permite al usuario regresar a la página anterior mediante 'window.history.back()', mejorando la navegación.
6. Contiene un mensaje de error oculto con estilos personalizados que puede ser mostrado si ocurre algún problema.
7. Finalmente, se enlazan dos archivos de JavaScript ('dataPokemonDTO.js' y 'detailPokemon.js') para manejar la lógica dinámica, como la recuperación de datos y la interacción con el usuario. -->
